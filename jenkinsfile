// def registry = 'https://valaxy05.jfrog.io'
// def imageName = 'valaxy05.jfrog.io/valaxy-docker-local/ttrend'
// def version   = '2.1.4'
pipeline {
    agent {
        node {
            label 'build-node'
        }
    }
    tools {
        nodejs 'node12'
        jdk 'java'
    }
environment {
        ARTIFACTORY_URL = 'jfrog.url'
        ARTIFACTORY_REPO = 'my-repo'
        ARTIFACTORY_USER = credentials('username-id')
        ARTIFACTORY_PASSWORD = credentials('JF_ACCESS_TOKEN')
}
    stages {
        stage("Install Dependencies"){
            steps {
                 echo "----------- Install package dependencies ----------"
                sh 'npm install'
                 echo "----------- Installation completed ----------"
            }
        }
        stage("UNIT-TEST"){
            steps{
                echo "----------- unit test started ----------"
                sh 'npm test'
                 echo "----------- unit test Complted ----------"
            }
        }

    stage('SonarQube analysis') {
    environment {
      scannerHome = tool 'sonar-scanner'
    }
    steps{
    withSonarQubeEnv('sonar-server') { // If you have configured more than one global server connection, you can specify its name
      sh "${scannerHome}/bin/sonar-scanner"
    }
    }
  }
  stage("Quality Gate"){
    steps {
        script {
        timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
    }
  }
      stage('Publish to Artifactory') {
            steps {
                script {
                
                    withCredentials([usernamePassword(credentialsId: 'artifactory-credentials-id', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                        sh '''
                        ./jfrog rt c --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASSWORD --interactive=false
                        ./jfrog rt npmp --build-name=my-build --build-number=${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }
    }

//          stage("Jar Publish") {
//         steps {
//             script {
//                     echo '<--------------- Jar Publish Started --------------->'
//                      def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"artfiact-cred"
//                      def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
//                      def uploadSpec = """{
//                           "files": [
//                             {
//                               "pattern": "jarstaging/(*)",
//                               "target": "libs-release-local/{1}",
//                               "flat": "false",
//                               "props" : "${properties}",
//                               "exclusions": [ "*.sha1", "*.md5"]
//                             }
//                          ]
//                      }"""
//                      def buildInfo = server.upload(uploadSpec)
//                      buildInfo.env.collect()
//                      server.publishBuildInfo(buildInfo)
//                      echo '<--------------- Jar Publish Ended --------------->'  
            
//             }
//         }   
//     }


//     stage(" Docker Build ") {
//       steps {
//         script {
//            echo '<--------------- Docker Build Started --------------->'
//            app = docker.build(imageName+":"+version)
//            echo '<--------------- Docker Build Ends --------------->'
//         }
//       }
//     }

//             stage (" Docker Publish "){
//         steps {
//             script {
//                echo '<--------------- Docker Publish Started --------------->'  
//                 docker.withRegistry(registry, 'artfiact-cred'){
//                     app.push()
//                 }    
//                echo '<--------------- Docker Publish Ended --------------->'  
//             }
//         }
//     }

// stage(" Deploy ") {
//        steps {
//          script {
//             echo '<--------------- Helm Deploy Started --------------->'
//             sh 'helm install ttrend ttrend-1.0.1.tgz'
//             echo '<--------------- Helm deploy Ends --------------->'
//          }
//        }
//      }  
}
}